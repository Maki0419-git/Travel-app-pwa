{"version":3,"sources":["firebase.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","length","app","initializeApp","App","file","storage","handleSubmit","a","imageRef","ref","child","name","put","alert","getDownloadURL","url","console","log","code","message","type","accept","onChange","e","target","files","onClick","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"2OAGWA,G,MAAiB,CACxBC,OAAQ,0CACRC,WAAY,uCACZC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGlBC,IAASC,KAAKC,OAAkDF,IAASG,MAAlDH,IAASI,cAAcZ,G,iBCqEhCa,MA5Ef,WACE,IAAIC,EAAO,KAGNN,IAASC,KAAKC,QAEjBF,IAASI,cAAcZ,GAIzB,IAAMe,EAAUP,IAASO,UAYnBC,EAAY,uCAAG,8BAAAC,EAAA,0DAIfH,EAJe,iCAQTI,EAAWH,EAAQI,MAAMC,MAAMN,EAAKO,MAR3B,SAUTH,EAASI,IAAIR,GAVJ,cAYfS,MAAM,4BAZS,SAcGL,EAASM,iBAdZ,OAcTC,EAdS,OAgBfC,QAAQC,IAAIF,GAhBG,kDAsBA,yBAAX,KAAEG,KAEJL,MAAM,4BAMNG,QAAQC,IAAI,KAAEE,SA9BD,0DAAH,qDA2ClB,OACE,gCAEE,uBAAOC,KAAK,OAAOC,OAAO,yBAAyBC,SAvDlC,SAAUC,GAE7BP,QAAQC,IAAIM,EAAEC,OAAOC,MAAM,IAE3BrB,EAAOmB,EAAEC,OAAOC,MAAM,MAqDpB,wBAAQC,QAASpB,EAAjB,8BChEcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNpC,QAAQoC,MAAMA,EAAMjC,YE/G5Ba,M","file":"static/js/main.2eb314c0.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\n\r\n\r\nexport var firebaseConfig = {\r\n    apiKey: \"AIzaSyAvLfE1ai2EO5zMyj3a8KftizoJeJGDbHQ\",\r\n    authDomain: \"weather-app-web-push.firebaseapp.com\",\r\n    projectId: \"weather-app-web-push\",\r\n    storageBucket: \"weather-app-web-push.appspot.com\",\r\n    messagingSenderId: \"657245387234\",\r\n    appId: \"1:657245387234:web:a6229dc8846435545161bb\",\r\n    measurementId: \"G-1KMTR536RX\"\r\n};\r\n// Initialize Firebase\r\n!firebase.apps.length ? firebase.initializeApp(firebaseConfig) : firebase.app();","import React from 'react';\nimport firebase from 'firebase/app';\nimport \"firebase/storage\";\nimport { firebaseConfig } from \"./firebase\";\nimport './App.css';\n\nfunction App() {\n  let file = null;\n\n\n  if (!firebase.apps.length) {\n\n    firebase.initializeApp(firebaseConfig);\n\n  }\n\n  const storage = firebase.storage();\n\n\n  const handleUpload = function (e) {\n\n    console.log(e.target.files[0]);\n\n    file = e.target.files[0];\n\n  }\n\n\n  const handleSubmit = async function () {\n\n\n\n    if (file) {\n\n      try {\n\n        const imageRef = storage.ref().child(file.name);\n\n        await imageRef.put(file);\n\n        alert(\"上傳成功\");\n\n        const url = await imageRef.getDownloadURL();\n\n        console.log(url);\n\n      }\n\n      catch (e) {\n\n        if (e.code === \"storage/unauthorized\") {\n\n          alert(\"尚未登入\");\n\n        }\n\n        else {\n\n          console.log(e.message);\n\n        }\n\n\n\n      }\n\n    }\n\n  }\n\n\n  return (\n    <div>\n\n      <input type=\"file\" accept=\"image/x-png,image/jpeg\" onChange={handleUpload} />\n\n      <button onClick={handleSubmit}>上傳</button>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}